#!/bin/bash

reportfailed()
{
    echo "Script failed...exiting. ($*)" 1>&2
    exit 255
}

export ORGCODEDIR="$(cd "$(dirname $(readlink -f "$0"))" && pwd -P)" || reportfailed

if [ "$DATADIR" = "" ]; then
    # Default to putting output in the code directory, which means
    # a separate clone of the repository for each build
    DATADIR="$ORGCODEDIR"
fi
source "$ORGCODEDIR/simple-defaults-for-bashsteps.source"

# Maybe the multiple build scripts in this directory could share the
# same .conf, but overall it is probably simpler to keep them
# separate.  Hopefully there will be time to revisit this decision
# when thinking more about best practices for bashsteps and $DATADIR.

DATADIRCONF="$DATADIR/datadir-jh.conf"

# avoids errors on first run, but maybe not good to change state
# outside of a step
touch  "$DATADIRCONF"

source "$DATADIRCONF"

imagesource="$DATADIR/vmimages/centos-7.1.1511-x86_64-base/output/minimal-image.raw.tar.gz"

## This script assumes link to ubuntu image is already at
## "$DATADIR/ubuntu-image-links/ubuntu-image.tar.gz"

VMDIR=jhvmdir

(
    $starting_group "Setup clean VM for Jupterhub/Docker"
    # not currently snapshotting this VM, but if the next snapshot exists
    # then this group can be skipped.
    [ -f "$DATADIR/$VMDIR/ubuntu-before-nbgrader.tar.gz" ]
    $skip_group_if_unnecessary

    (
	$starting_step "Make $VMDIR"
	[ -d "$DATADIR/$VMDIR" ]
	$skip_step_if_already_done ; set -e
	mkdir "$DATADIR/$VMDIR"
	# increase default mem to give room for a wakame instance or two
	echo ': ${KVMMEM:=4096}' >>"$DATADIR/$VMDIR/datadir.conf"
	[ -f "$DATADIR/datadir-jh.conf" ] || reportfailed "datadir-jh.conf is required"
	cat "$DATADIR/datadir-jh.conf" >>"$DATADIR/$VMDIR/datadir.conf"
    ) ; prev_cmd_failed

    DATADIR="$DATADIR/$VMDIR" \
	   "$ORGCODEDIR/ind-steps/kvmsteps/kvm-setup.sh" \
	   "$DATADIR/ubuntu-image-links/ubuntu-image.tar.gz"
    # TODO: this guard is awkward.
    [ -x "$DATADIR/$VMDIR/kvm-boot.sh" ] && \
	"$DATADIR/$VMDIR/kvm-boot.sh"

    (
	$starting_step "Allow sudo for ubuntu user account, remove mtod"
	[ -x "$DATADIR/$VMDIR/ssh-to-kvm.sh" ] &&
	    SSHUSER=root "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null 1>/dev/null
grep 'ubuntu.*ALL' /etc/sudoers >/dev/null
EOF
	$skip_step_if_already_done ; set -e

	SSHUSER=root "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
echo 'ubuntu ALL=(ALL) NOPASSWD: ALL' >>/etc/sudoers
rm /etc/update-motd.d/*
EOF
    ) ; prev_cmd_failed

    (
	$starting_step "Install git, ansible"
	[ -x "$DATADIR/$VMDIR/ssh-to-kvm.sh" ] &&
	    "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null 1>/dev/null
which git && which ansible
EOF
	$skip_step_if_already_done ; set -e

	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
sudo apt-get update
sudo apt-get -y install git
sudo apt-get -y install ansible
EOF
    ) ; prev_cmd_failed

    (
	$starting_step "Clone https://github.com/compmodels/jupyterhub-deploy.git"
	[ -x "$DATADIR/$VMDIR/ssh-to-kvm.sh" ] &&
	    "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null 1>/dev/null
[ -d jupyterhub-deploy ]
EOF
	$skip_step_if_already_done ; set -e

	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
git clone https://github.com/compmodels/jupyterhub-deploy.git
EOF
    ) ; prev_cmd_failed

) ; prev_cmd_failed

(
    $starting_group "Snapshot base KVM image"
    [ -f "$DATADIR/$VMDIR/ubuntu-before-nbgrader.tar.gz" ]
    $skip_group_if_unnecessary

    [ -x "$DATADIR/$VMDIR/kvm-shutdown-via-ssh.sh" ] && \
	"$DATADIR/$VMDIR/kvm-shutdown-via-ssh.sh"

    (
	$starting_step "Make snapshot of image with jupyterhub/docker installed"
	[ -f "$DATADIR/$VMDIR/ubuntu-before-nbgrader.tar.gz" ]
	$skip_step_if_already_done ; set -e
	cd "$DATADIR/$VMDIR/"
	tar czSvf  ubuntu-before-nbgrader.tar.gz ubuntu-14-instance-build.img
    ) ; prev_cmd_failed

) ; prev_cmd_failed

(
    $starting_group "Boot three VMs"

    boot-one-vm()
    {
	avmdir="$1"
	(
	    $starting_step "Make $avmdir"
	    [ -d "$DATADIR/$avmdir" ]
	    $skip_step_if_already_done ; set -e
	    mkdir "$DATADIR/$avmdir"
	    # increase default mem to give room for a wakame instance or two
	    echo ': ${KVMMEM:=4096}' >>"$DATADIR/$avmdir/datadir.conf"
	    [ -f "$DATADIR/$3" ] || reportfailed "$3 is required"
	    # copy specific port forwarding stuff to avmdir, so vmdir*/kvm-* scripts
	    # will have all config info
	    cat "$DATADIR/$3" >>"$DATADIR/$avmdir/datadir.conf"
	    # copy ssh info from main VM to note VMs:
	    cp "$DATADIR/$VMDIR/sshuser" "$DATADIR/$avmdir/sshuser"
	    cp "$DATADIR/$VMDIR/sshkey" "$DATADIR/$avmdir/sshkey"
	) ; prev_cmd_failed

	if ! [ -x "$DATADIR/$avmdir/kvm-boot.sh" ]; then
	    DATADIR="$DATADIR/$avmdir" \
		   "$ORGCODEDIR/ind-steps/kvmsteps/kvm-setup.sh" \
		   "$DATADIR/$VMDIR/ubuntu-before-nbgrader.tar.gz"
	fi
	# Note: the (two) steps above will be skipped for the main KVM

	(
	    $starting_step "Expand fresh image from snapshot for $2"
	    [ -f "$DATADIR/$avmdir/ubuntu-14-instance-build.img" ]
	    $skip_step_if_already_done ; set -e
	    cd "$DATADIR/$avmdir/"
	    tar xzSvf ../$VMDIR/ubuntu-before-nbgrader.tar.gz
	) ; prev_cmd_failed

	# TODO: this guard is awkward.
	[ -x "$DATADIR/$avmdir/kvm-boot.sh" ] && \
	    "$DATADIR/$avmdir/kvm-boot.sh"
	
	(
	    $starting_step "Setup private network for VM $avmdir"
	    "$DATADIR/$avmdir/ssh-to-kvm.sh" <<EOF 2>/dev/null >/dev/null
grep eth1 /etc/network/interfaces
EOF
	    $skip_step_if_already_done
	    addr=$(
		case "$2" in
		    *main*) echo 99 ;;
		    *1*) echo 1 ;;
		    *2*) echo 2 ;;
		    *) reportfailed "BUG"
		esac
		)

	    # http://askubuntu.com/questions/441619/how-to-successfully-restart-a-network-without-reboot-over-ssh
	    "$DATADIR/$avmdir/ssh-to-kvm.sh" <<EOF
sudo tee -a /etc/network/interfaces <<EOF2

auto eth1
iface eth1 inet static
    address 192.168.11.$addr
    netmask 255.255.255.0
EOF2

# sudo ifdown eth1
sudo ifup eth1

EOF
	) ; prev_cmd_failed
    }

    boot-one-vm "$VMDIR" "main KVM" datadir-jh.conf
    boot-one-vm "$VMDIR-node1" "node 1 KVM" datadir-jh-node1.conf
    boot-one-vm "$VMDIR-node2" "node 2 KVM" datadir-jh-node2.conf

) ; prev_cmd_failed

(
    $starting_step "Make sure mac addresses were configured"
    # Make sure all three mac addresses are unique
    [ $(grep -ho 'export.*mcastMAC.*' "$DATADIR"/jhvmdir*/*conf | sort -u | wc -l) -eq 3 ]
    $skip_step_if_already_done
    # always fail if this has not been done
    reportfailed "Add mcastMAC= to: datadir-jh.conf datadir-jh-node2.conf datadir-jh-node1.conf"
) ; prev_cmd_failed

exit 44 # just test code above

###################  code below not modified ###################

(
    $starting_group "Docker Swarm and Docker-Machine stuff"

    (
	$starting_step "Install docker-machine to main KVM"
	## https://docs.docker.com/machine/install-machine/
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null
[ -x /usr/local/bin/docker-machine ]
EOF
	$skip_step_if_already_done
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<'EOF'
set -x
sudo curl -L https://github.com/docker/machine/releases/download/v0.7.0/docker-machine-`uname -s`-`uname -m` -o /usr/local/bin/docker-machine && \
  sudo chmod +x /usr/local/bin/docker-machine
EOF
    ) ; prev_cmd_failed

    (
	$starting_step "Copy private ssh key to main KVM"
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null
[ -f .ssh/id_rsa ]
EOF
	$skip_step_if_already_done
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
set -x
cat >.ssh/id_rsa <<EOF2
$(< "$DATADIR/$VMDIR/sshkey")
EOF2
chmod 600 .ssh/id_rsa
EOF
    ) ; prev_cmd_failed

    dm-create-one-vm()
    {
	avmdir="$1"
	(
	    $starting_step "Do 'docker-machine create' command for $2"
	    "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null
## TODO: is this a good way to check?
/usr/local/bin/docker-machine ls | grep -F 192.168.11.$3 1>/dev/null
EOF
	    $skip_step_if_already_done
	    "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
set -x
/usr/local/bin/docker-machine create --driver generic   --generic-ip-address=192.168.11.$3 --generic-ssh-user=centos $4
EOF
	) ; prev_cmd_failed
    }

    dm-create-one-vm "$VMDIR" "main KVM" 99 main
    dm-create-one-vm "$VMDIR-node1" "node 1 KVM" 1 node1
    dm-create-one-vm "$VMDIR-node2" "node 2 KVM" 2 node2

    (
	$starting_step "Create a Swarm discovery token"
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF 2>/dev/null
[ -f swarm-token.txt ]
EOF
	$skip_step_if_already_done
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<'EOF'
set -x
eval $(docker-machine env manager)
docker run --rm swarm create > swarm-token.txt
echo "The new swarm token: '$(< swarm-token.txt)'"
EOF
    ) ; prev_cmd_failed

    (
	$starting_step "Run a Swarm container that functions as the primary manager"
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<'EOF' 2>/dev/null
set -x
[[ "$(docker ps)" == *swarm\ manage* ]]
EOF
	$skip_step_if_already_done
	"$DATADIR/$VMDIR/ssh-to-kvm.sh" <<'EOF'
set -x
eval $(docker-machine env main)
thetoken="$(< swarm-token.txt)"
## TODO: double check the /etc/docker part
    docker run -d -p 3376:3376 -t -v /etc/docker:/certs:ro swarm manage -H 0.0.0.0:3376 --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/server.pem --tlskey=/certs/server-key.pem token://$thetoken

EOF
    ) ; prev_cmd_failed

    start-node-agent-one-vm()
    {
	avmdir="$1"
	(
	    $starting_step "Start node agent for $2"
	    "$DATADIR/$avmdir/ssh-to-kvm.sh" <<'EOF' 2>/dev/null
[[ "$(docker ps)" == *swarm\ join* ]]
EOF
	    $skip_step_if_already_done
	    "$DATADIR/$VMDIR/ssh-to-kvm.sh" <<EOF
set -x
eval \$(docker-machine env $4)
thetoken="\$(< swarm-token.txt)"
docker run -d swarm join --addr=\$(docker-machine ip $4):2376 token://\$thetoken

EOF
	) ; prev_cmd_failed
    }

    start-node-agent-one-vm "$VMDIR-node1" "node 1 KVM" 1 node1
    start-node-agent-one-vm "$VMDIR-node2" "node 2 KVM" 2 node2

) ; prev_cmd_failed
