#!/bin/bash

source "$(dirname $(readlink -f "$0"))/bashsteps-bash-utils-jan2017.source" || exit

# nodecount, vmdir_list, and mainbuilddir should now
# have values that were already set in datadir.conf

existing_dir="$1"
path_to_ubuntu_image="$2"

eval_iferr_exit 'path_to_ubuntu_image="$(readlink -f "$path_to_ubuntu_image")"'

shift 3
ip_array=( "$@" )

thisfile="${0##*/}"
mainscript="${thisfile%-new}"

existing_directory_for_datadir()
{
    ## If this file's name is the main script's filename + "-new", then
    ## the following lines of code should be reusable:
    [ "$thisfile" != "$mainscript" ] || iferr_exit 'required filename pattern not followed'
    [ "$existing_dir" != "" ] || iferr_exit "First parameter should be the emacs build directory"
    [ -f "$existing_dir/datadir.conf" ] || iferr_exit "Second parameter should be existing datadir"
    eval_iferr_exit 'DATADIR="$(readlink -f "$existing_dir")"'
    ln -s "$ORGCODEDIR/$mainscript" "$existing_dir" || iferr_exit "ln to $mainscript"
}
existing_directory_for_datadir

eval_iferr_exit 'source "$DATADIR/datadir.conf"'

[ "$nodecount" -gt 0 ] && [ "$nodecount" -lt 20 ] || iferr_exit "Invalid nodecount in datadir.conf"

# used for generating unique new IP addresses and checking for duplicate
# IP addresses for subenvironments
output_used_ips()
{
    [ -d "$DATADIR/mainenvironment/subenvironments" ] || return 0
    (
	shopt -s nullglob
	for e in "$DATADIR/mainenvironment" "$DATADIR/mainenvironment/subenvironments"/*; do
	    for c in "$e"/jhvmdir*/datadir.conf; do
		VMIP=""
		source "$c"
		[ "$VMIP" != "" ] && echo "$VMIP"
	    done
	done
    )
}

# enough checking to catch careless typos or missing parameters
check_ip_validity()
{
    for ip in "${ip_array[@]}"; do
	[ "${ip//[0-9]}" = "..." ] || iferr_exit "Parameter ($ip) is not a valid IP4 address"
    done
    [ "${#ip_array[@]}" -eq $((nodecount + 2)) ] || iferr_exit "Number of IP addresses on command line does not match number of nodes plus two"
}


# Just increments the last octet to generate new addresses.  Mainly for debugging.
generate_ip_addresses()
{

    first_3_octets="$(output_used_ips | while read ln ; do echo "${ln%.*}"; done | sort -u)"
    [ "$(wc -l <<<"$first_3_octets")" = "1" ] || \
	just_exit 'auto IP selection cannot be used if existing IP are not on same /24 network'
    biggest="$(output_used_ips | while read ln ; do echo "${ln##*.}"; done | sort -n | tail -n 1)"
    (
	source "$mainbuilddir/jhvmdir/datadir.conf"
	echo "$VMIP" # reuse from main environment's ansible VM
    )
    [ $(( nodecount + 1 + biggest )) -lt 255 ] || just_exit "No more IP addresses left for automatic generation"
    for (( i=0 ; i< nodecount + 1 ; i++ )); do  # one for each node plus one for the hub
	(( biggest++ ))
	echo "$first_3_octets"."$biggest"
    done
}

# Deal with the details that depend on whether this is a "main" jupterhub environment
# with it's own jhvmdir VM, or a "subordinate" jupterhub environment that uses an
# already existing  jhvmdir VM.

if [ "$mainbuilddir" = "" ]; then
    check_ip_validity
    # It will be a "main" jupterhub environment
    randomport="$(( 5000 + ( $RANDOM % 5000 ) ))"
    mcport="$randomport"
    ansible_path="/home/ubuntu"  # put the "main" environment jupyterhub-deploy in the jhvmdir home dir
else
    # It will be a "subordinate" jupterhub environment
    # So use the same mcast port as the "main" jupterhub environment.
    mcport="$(source "$mainbuilddir/jhvmdir/datadir.conf" ; echo "$mcastPORT")"

    # And put ansible playbooks in a directory named after the build directory.
    lasttoken="${DATADIR##*/}"
    ansible_path="/home/ubuntu/subs/$lasttoken"  # the path inside the jhvmdir VM

    if [ "${ip_array[0]}" = "auto" ]; then
	# auto generation
	ip_array=( $(generate_ip_addresses) ) || exit
    else
	# pass in by parameter
	check_ip_validity
	# Do a quick check for duplicate IP addresses
	usedip="$(output_used_ips)"
	for ip in "${ip_array[@]:1}"; do  # ":1" skips the first IP address for the main ansible VM
	    for u in $usedip; do
		[ "$ip" = "$u" ] && just_exit "IP address ($ip) already in use."
	    done
	done
    fi
fi

ipindex=0
for i in $vmdir_list; do
    IP="${ip_array[ipindex++]}"
    # Assuming all VMs are on the same /24 subnet, the last octet
    # is enough to make the MAC addresses unique
    lastoctet="${IP##*.}"
    inhex="$(printf "%02x" "$lastoctet")"

    case "$i" in
	jhvmdir)
	    # these settings are ignored for "subordinate" jupterhub environments
	    imagepath="$path_to_ubuntu_image"
	    MAC=52:54:00:12:$inhex:99
	    ;;
	jhvmdir-hub)
	    imagepath="$DATADIR/jhvmdir/ubuntu-before-nbgrader.tar.gz"
	    MAC=52:54:00:12:$inhex:88
	    ;;
	jhvmdir-node*)
	    imagepath="$DATADIR/jhvmdir/ubuntu-before-nbgrader.tar.gz"
	    n="${i#*-node}"
	    nn="$(printf "%02d" "$n")"
	    MAC=52:54:00:12:$inhex:$nn
	    ;;
    esac

    if [ "$i" = "jhvmdir" ] && [ "$mainbuilddir" != "" ]; then
	ln -s "$mainbuilddir/jhvmdir" "$DATADIR/$i"
    else
	# Make one of the build directories of the VMs (including jhvmdir if
	# this is a "main" jupterhub environment.)
	"$ORGCODEDIR/../kvmsteps/kvmsteps.sh-new" "$DATADIR/$i" "$imagepath" OK || iferr_exit
	cat >>"$DATADIR/$i/datadir.conf" <<EOF || iferr_exit "datadir.conf init failed for $i"
# Not all of these are used on every VM
export EXTRAHOSTFWDREL=""

# port 22 is already assigned by kvmsteps
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::43-$IP:443
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::80-$IP:80
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::81-$IP:8001
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::83-$IP:8000
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::84-$IP:8888
EXTRAHOSTFWDREL=\$EXTRAHOSTFWDREL,hostfwd=tcp::90-$IP:9000

export VMIP="$IP"
export mcastMAC="$MAC"
export mcastPORT="$mcport"
EOF
    fi
done

cat  >>"$DATADIR/datadir.conf" <<EOF || iferr_exit "datadir.conf init failed for whole environment"
ansible_path="$ansible_path"
EOF

echo "Success"
