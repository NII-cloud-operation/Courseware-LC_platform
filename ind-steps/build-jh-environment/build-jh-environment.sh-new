#!/bin/bash

source "$(dirname $(readlink -f "$0"))/bashsteps-bash-utils-jan2017.source" || exit

new_dir="$1"

: "${nodecount:=2}" "${mainbuilddir:=}"

thisfile="${0##*/}"
mainscript="${thisfile%-new}"

standard_datadir_setup()
{
    ## If this file's name is the main script's filename + "-new", then
    ## the following lines of code should be reusable:
    [ "$thisfile" != "$mainscript" ] || iferr_exit 'required filename pattern not followed'
    [ "$new_dir" != "" ] || iferr_exit "First parameter should be the emacs build directory"
    [ -d "$new_dir" ] && just_exit "$new_dir already exists"
    eval_iferr_exit 'mkdir -p "$new_dir"'
    eval_iferr_exit 'DATADIR="$(readlink -f "$new_dir")"'
    ln -s "$ORGCODEDIR/$mainscript" "$new_dir" || iferr_exit "ln to $mainscript"
}
standard_datadir_setup

node_list="$(for i in $(seq 1 $nodecount) ; do echo -n " node$i" ; done)"
node_list="${node_list# }"
vmdir_list="$(for i in $(seq 1 $nodecount) ; do echo -n " jhvmdir-node$i" ; done)"
vmdir_list="jhvmdir jhvmdir-hub $vmdir_list"

if [ "$mainbuilddir" != "" ]; then
    # put in links and back links from here to the main build dir, which will
    # be used for IP address conflicts, and maybe other things.
    { [ -d "${mainbuilddir%/}/jhvmdir" ] && \
	  ! [ -L "$mainbuilddir/jhvmdir" ]
    } || just_exit 'The zvar $mainbuilddir does not point to a main envirnoment'
    eval_iferr_exit 'mainbuilddir="$(readlink -f "$mainbuilddir")"'

    mkdir -p "$mainbuilddir/subenvironments"
    datadirname="${DATADIR##*/}"
    rm -f "$mainbuilddir/subenvironments/$datadirname"
    ln -s "$DATADIR" "$mainbuilddir/subenvironments/$datadirname"
    ln -s "$mainbuilddir" "$DATADIR/mainenvironment"
fi

cat  >>"$DATADIR/datadir.conf" <<EOF || iferr_exit "datadir.conf init failed for whole environment"
node_list="$node_list"
vmdir_list="$vmdir_list"
nodecount="$nodecount"
mainbuilddir="$mainbuilddir" # empty if this is the main build

# Defaults commit to use for each build repository.  Can be set to
# "unchanged" to use the commit currently checkout in the repo-cache
# directory, which for fresh clones will normally be the lastest in
# the master branch. (- characters must be changed to _ in the repo name)
# (commit ids must include at least the first 7 hex digits)

setcommit_jh_jupyterhub="6078b8d9e5576cd14eb2d76d8efbe83685f72beb"
# TODO: debug why later jupyterhub commits break the system

setcommit_dockerspawner="49491ad878ac0d15ef597fdd0aadcaa112158211" # TODO: temp fix

## commit 2815057 on Oct 6 broke the build by loading jupyterhub 8.0 into base-notebook
## https://github.com/jupyter/docker-stacks/commit/281505737f8a24cb19fb5e335738dff9736fb591
setcommit_docker_stacks="e1677043235c1d96f306564ed1add934231bd616"  # Thu Sep 28 21:01:51 2017

## To try to make the build more stable, now
## pinning the rest of these to known-to-work commits:
## (even though some of these are currently the lastest master and
## some are our custom fork of the repository)
## NOTE: the docker files in these pull from other upstream
## repositories and image hub-a-thingies, so it is still possible
## for upstream to break the build.
setcommit_jupyterhub="9971937f56e9739b6a29cf5aaeacbbc87dc41f87"
setcommit_jupyterhub_deploy="e348430976abc42e9ed49445cfb0a68927b6b236"
setcommit_restuser="8ae60639c6be8cb3c50d8dd838a98ad8508b4f19"
setcommit_systemuser="895f7d508bf613895d8d4219935727e848659422"
EOF

# For reference: It was probably this commit on https://github.com/jupyterhub/dockerspawner
# that broke our build:
# https://github.com/jupyterhub/dockerspawner/commit/f498057e110a239f1dd8bb5c5bc1cfd93fb7e933

# make all of the reset scripts callable through the build directory
for i in "$ORGCODEDIR/reset-scripts"/reset*.sh ; do
    ln -s "$i" "$DATADIR"
done

echo "Success"
echo "Note, the VM directories still need to be created inside .../${DATADIR##*/}"

