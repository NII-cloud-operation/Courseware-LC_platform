#!/bin/bash

# This script should be called using "source" by another bashsteps script.

(
    $starting_group "Post-ansible build steps for auth-proxy"

    (
	$starting_step "Copy auth-proxy's certificate and key to hub VM"

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" <<EOF 2>/dev/null >/dev/null
[ -f /home/ubuntu/auth-proxy/nginx/certs/auth-proxy.key ] && \
[ -f /home/ubuntu/auth-proxy/nginx/certs/auth-proxy.chained.cer ]
EOF
	$skip_step_if_already_done

	# if no auth-proxy key and cert is in "$DATADIR", reuse the self-signed
	# key generated for the hub
	[ -f "$DATADIR/auth-proxy.key" ] || \
	    "$DATADIR/$VMDIR/ssh-shortcut.sh" \
		cat jupyterhub-deploy/certificates/hub-key.pem >"$DATADIR/auth-proxy.key"
	
	[ -f "$DATADIR/auth-proxy.chained.cer" ] || \
	    "$DATADIR/$VMDIR/ssh-shortcut.sh" \
		cat jupyterhub-deploy/certificates/hub-cert.pem >"$DATADIR/auth-proxy.chained.cer"
	
	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" <<EOF
set -x
set -e

mkdir -p /home/ubuntu/auth-proxy/nginx/certs

cat >/home/ubuntu/auth-proxy/nginx/certs/auth-proxy.key <<EOF2
$(cat "$DATADIR/auth-proxy.key")
EOF2

cat >/home/ubuntu/auth-proxy/nginx/certs/auth-proxy.chained.cer <<EOF3
$(cat "$DATADIR/auth-proxy.chained.cer")
EOF3

EOF
    ) ; $iferr_exit

    (
	$starting_step "Copy php scripts to hub VM"

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" <<EOF 2>/dev/null >/dev/null
[ -d /home/ubuntu/auth-proxy/php ]
EOF
	$skip_step_if_already_done; set -e

	(
	    # clone from our cached copy
	    cd "$ORGCODEDIR/../../auth-proxy/resources"
	    tar c php
	) | "$DATADIR/$VMDIR-hub/ssh-shortcut.sh" tar x -C /home/ubuntu/auth-proxy
    ) ; $iferr_exit

    (
	$starting_step "Run docker container for auth-proxy"

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" <<EOF 2>/dev/null >/dev/null
sudo docker ps -a | grep auth-proxy:latest
EOF
	$skip_step_if_already_done

	# Note, using port 9000 so this nginx can run at the same time as the
	# original nginx.  The port forwarded to it is xxx90. (instead of xxx43)

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" -q sudo bash <<EOF
  docker run -v /home/ubuntu/auth-proxy/php:/var/www/php -v /home/ubuntu/auth-proxy/nginx/certs:/etc/nginx/certs --privileged --name root_nginx_3 -p 9000:443 --link root_jpydb_1:root_jpydb_1 -d auth-proxy:latest /sbin/init	
EOF
    ) ; $iferr_exit

    (
	$starting_step "Make sure root_jupyterhub_1 container is running"
	# This step was just a workaround. It should be running by now, but
	# sometimes it is not, not sure why.
	# Now it is also used when the jupyterhub container is reset.
	"$DATADIR"/jhvmdir-hub/ssh-shortcut.sh <<'EOF' 1>/dev/null 2>&1
dout="$(sudo docker ps | grep root_jupyterhub_1)"
set -x
exec 2>/tmp/why
[[ "$dout" == *Up* ]]
EOF
	$skip_step_if_already_done; set -e

	"$DATADIR"/jhvmdir-hub/ssh-shortcut.sh sudo docker stop root_jupyterhub_1
	"$DATADIR"/jhvmdir-hub/ssh-shortcut.sh sudo docker start root_jupyterhub_1
    ) ; $iferr_exit

    (
	$starting_step "Make sure docker container for auth-proxy is started"

	#### This step is needed when restoring snapshots
	
	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" <<EOF 2>/dev/null >/dev/null
sudo docker ps | grep auth-proxy:latest
EOF
	$skip_step_if_already_done

	# Note, using port 9000 so this nginx can run at the same time as the
	# original nginx.  The port forwarded to it is xxx90. (instead of xxx43)

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" -q sudo bash <<EOF
  docker start root_nginx_3
EOF
    ) ; $iferr_exit

    (
	$starting_step "Start daemons in the docker container for auth-proxy"

	output="$( "$DATADIR/$VMDIR-hub/ssh-shortcut.sh" -q <<EOF 2>/dev/null
sudo docker exec -i root_nginx_3 bash <<EOF2 
  /etc/init.d/nginx status
  /etc/init.d/php5.6-fpm status
EOF2
EOF
	)"
	# echo "$output"
	pat='*is running*is running*'
	[[ "$output" == $pat ]]
	$skip_step_if_already_done

	"$DATADIR/$VMDIR-hub/ssh-shortcut.sh" -q <<EOF
sudo docker exec -i root_nginx_3 bash <<EOF2
(
  /etc/init.d/nginx start
  /etc/init.d/php5.6-fpm start
) >/tmp/dstart.log 2>&1
# The redirection is necessary otherwise init.d/nginx makes "docker exec" hang
EOF2
EOF
    ) ; $iferr_exit
)
