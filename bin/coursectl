#!/bin/bash

check_dep() {
  local dep="$1"

  command -v "${dep}" >/dev/null 2>&1
  if [[ "$?" != "0" ]]; then
    echo "Missing dependency: ${dep}"
    exit 1
  fi
}

reportfailed()
{
    echo "Script failed...exiting. ($*)" 1>&2
    exit 255
}

usage()
{
    cat <<EOF
Usage:

## Deploy new course environment.
coursectl deploy BUILD_DIR COURSE_DIR BRIDGE
  BUILD_DIR: directory of the Courseware which built. 
  COURSE_DIR: directory of the course environtment to deploy. 
  BRIDGE: bridge name for connecting each KVM process. 

## Initialize new course environment.
coursectl new COURSE_DIR ADMIN_EMAIL ACCESS_POINT
  COURSE_DIR: directory of the course environtment which generated by script 'coursectl deploy'. 
  ADMIN_EMAIL: e-mail address of the course administrator (generally teacher of lecture).
  ACCESS_POINT: access point of the course. FQDN of the Hub machine. 

## Delete course
coursectl delete COURSE_DIR
  COURSE_DIR: directory of the course environtment.

## Restarts JupyerHub of Courseware
coursectl restart COURSE_DIR
  COURSE_DIR: directory of the course environtment.

## enable SSO for the course.   
coursectl enable-sso COURSE_DIR IDP_PROXY_HOST
  COURSE_DIR: directory of the course environtment.
  IDP_PROXY_HOST: FQDN of the idp-proxy. 

## disable SSO for the course.
coursectl disable-sso COURSE_DIR IDP_PROXY_HOST
  COURSE_DIR: directory of the course environtment.
  IDP_PROXY_HOST: FQDN of the idp-proxy. 

## set access point of the course.
coursectl set-accesspoint COURSE_DIR ACCESS_POINT
  COURSE_DIR: directory of the course environtment.
  ACCESS_POINT: access point of the course. FQDN of the Hub machine. 

## set authorization for the user's attendance 
coursectl set-author COURSE_DIR GROUP_LIST
  COURSE_DIR: directory of the course environtment.
  GROUP_LIST: group list of the user. 

## reset authorization for the user's attendance 
coursectl reset-author COURSE_DIR
  COURSE_DIR: directory of the course environtment.

## show authorization for the user's attendance 
coursectl show-author COURSE_DIR
  COURSE_DIR: directory of the course environtment.

## change password of the specified local user.
coursectl change-password COURSE_DIR USER_EMAIL NEW_PASSWORD
  COURSE_DIR: directory of the course environtment.
  USER_EMAIL: e-mail address of the local user to change the password.
  NEW_PASSWORD: new password. 

## initialize password of the specified local user.
coursectl reset-password COURSE_DIR USER_EMAIL
  COURSE_DIR: directory of the course environtment.
  USER_EMAIL: e-mail address of the local user to initialize the password.

EOF
}

source $(dirname $0)/const

export ORGCODEDIR="$(cd "$(dirname $(readlink -f "$0"))" && pwd -P)" || reportfailed

rootdir="${ORGCODEDIR%/*}"

function generate_course()
{
    local builddir="$1"
    local hubdir="$2"
    local bridge="$3"

    $rootdir/ind-steps/build-jh-environment/restore-environment-from-snapshot.sh-new $builddir $hubdir $bridge
    $rootdir/ind-steps/build-jh-environment/restore-environment-from-snapshot.sh $hubdir do
}

function init_course()
{
    local hubdir="$1"  # Path to the build directory
    local teacher_mail="$2"
    local accesspoint="$3"

    if [ -z "$hubdir" ] || [ -z "$teacher_mail" ] || [ -z "$accesspoint" ] ; then
        reportfailed "too few arguments."
    fi
    TEACHER_MAIL="$teacher_mail" $rootdir/bin/init-course.sh $hubdir do guest
    set_accesspoint $hubdir $accesspoint
}

function enable_sso()
{
    local hubdir="$1"
    local idp_proxy_host="$2"

    # check parameters
    if [ -z "$hubdir" ] || [ -z "$idp_proxy_host" ] ; then
        reportfailed "too few arguments."
    fi

    # set idp-proxy metadata in auth-proxy
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i ${AUTH_PROXY_NAME} bash << EOF
/var/www/simplesamlphp/bin/get_idp_proxy_metadata.sh $idp_proxy_host
EOF
}

function disable_sso()
{
    local hubdir="$1"
    local idp_proxy_host="$2"

    # check parameters
    if [ -z "$hubdir" ] || [ -z "$idp_proxy_host" ] ; then
        reportfailed "too few arguments."
    fi

    # remove idp-proxy metadata in auth-proxy
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i ${AUTH_PROXY_NAME} bash << EOF
/var/www/simplesamlphp/bin/remove_idp_proxy_metadata.sh $idp_proxy_host
EOF
}


function delete_jupyterhub()
{
    local hubdir="$1"

    [ -d "$hubdir" ] || reportfailed "Hub directory '$hubdir' does not exist."

    while true; do
        read -p "Do you delete course '$hubdir'? [Y/n]" answer
        case $answer in
            '' | [Yy]* )
                rm -rf $hubdir
                break;
                ;;
            [Nn]* )
                break;
                ;;
            * )
              echo Please answer yes or no.
        esac
    done;
}


function restart_jupyterhub()
{
    local hubdir="$1"

    [ -d "$hubdir" ] || reportfailed "Hub directory '$hubdir' does not exist."

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_jupyterhub_1
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_jupyterhub_1
}


function set_accesspoint()
{
    local hubdir="$1"
    local accesspoint="$2"

    if [ -z "$hubdir" ] || [ -z "$accesspoint" ] ; then
        reportfailed "too few arguments."
    fi
    [ -d "$hubdir" ] || reportfailed "Hub directory '$hubdir' does not exist."

    entity_id="https://$accesspoint/simplesaml/module.php"
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i ${AUTH_PROXY_NAME} bash << EOF
sed -i "s;'entityID' => .*;'entityID' => '$entity_id',;" /var/www/simplesamlphp/config/authsources.php
EOF
}

function set_authorization()
{
    local hubdir="$1"
    local group_list="$2"

    group_list=$(echo $group_list | sed -e "s/ /' '/g")  
    group_list="'$group_list'"
 
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q << EOF
sed -i "s,AUTHOR_GROUP_LIST = array (.*,AUTHOR_GROUP_LIST = array ($group_list);," $HUB_CONST_PATH
EOF
   
}

function reset_authorization()
{
    local hubdir="$1"

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q << EOF
sed -i "s,AUTHOR_GROUP_LIST = array (.*,AUTHOR_GROUP_LIST = array ();," $HUB_CONST_PATH
EOF
}

function show_authorization()
{
    local hubdir="$1"

    list=$("$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q << EOF | grep AUTH 
grep AUTHOR_GROUP_LIST $HUB_CONST_PATH
EOF
)
    echo $list | sed -e "s/'//g" | sed -e "s/^const.*array (//" | sed -e "s/);$//" 
}

function change_password()
{
    local hubdir="$1"
    local email="$2"
    local new_password="$3"

    if [ -z "$hubdir" ] || [ -z "$email" ] || [ -z "$new_password" ] ; then
        reportfailed "too few arguments."
    fi
    [ -d "$hubdir" ] || reportfailed "Hub directory '$hubdir' does not exist."

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i ${AUTH_PROXY_NAME} bash << EOF
php /var/www/php/change-local-user-password.php $email $new_password
EOF
}


function reset_password()
{
    local hubdir="$1"
    local email="$2"

    if [ -z "$hubdir" ] || [ -z "$email" ] ; then
        reportfailed "too few arguments."
    fi
    [ -d "$hubdir" ] || reportfailed "Hub directory '$hubdir' does not exist."


    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i ${AUTH_PROXY_NAME} bash << EOF
php /var/www/php/reset-local-user-password.php $email
EOF
}


function dump_database()
{
    local hubdir="$1"
    for table in api_tokens users proxies hubs servers; do
	echo
	echo "Table: $table"
	"$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q \
	    	 sudo docker exec -i root_jpydb_1 \
	    	 /usr/lib/postgresql/9.6/bin/psql -U postgres -d jupyterhub <<<"select * from $table ;"
    done
}


#----- main -----
cmd="$1"
shift

case "$cmd" in
    new) init_course "$@"
        ;;
    enable-sso) enable_sso "$@"
        ;;
    disable-sso) disable_sso "$@"
        ;;
    delete) delete_jupyterhub "$@"
        ;;
    restart) restart_jupyterhub "$@"
        ;;
    set-accesspoint) set_accesspoint "$@"
        ;;
    set-author)
        hub=$1
        shift
        list=$@
        set_authorization $hub "$list"
        ;;
    reset-author) reset_authorization "$@"
        ;;
    show-author) show_authorization "$@"
        ;;
    change-password) change_password "$@"
        ;;
    reset-password) reset_password "$@"
        ;;
    deploy) generate_course "$@"
        ;;
    dumpdb) dump_database "$@"
        ;;
    *) usage
        ;;
esac
