#!/bin/bash

reportfailed()
{
    echo "Script failed...exiting. ($*)" 1>&2
    exit 255
}

usage()
{
    cat <<EOF
Usage:

./bin/coursectl list              ## Lists assigned JupyterHub servers
./bin/coursectl new {hub_dir} {admin_mail_address}       ## Assigns new JupyterHub server
./bin/coursectl delete {hub_dir}    ## Disconnects JupyterHub server
./bin/coursectl restart {hub_dir}   ## Restarts JupyterHub server

EOF
}

export ORGCODEDIR="$(cd "$(dirname $(readlink -f "$0"))" && pwd -P)" || reportfailed

rootdir="${ORGCODEDIR%/*}"

init_jupyterhub()
{
    hubdir="$1"  # Path to the build directory
    teacher_mail="$2"

    [ -d "$hubdir" ] || reportfailed "Hub direcotry '$hubdir' does not exist."

    echo "hubdir: "$hubdir
    echo "teacher_mail: "$teacher_mail

    # remove original proxy container
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker rm -f root_nginx_1

    # create local user id of teacher from teacher's mail address
    teacherid=$("$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_nginx_3 bash << EOF
php -r "require_once '/var/www/php/functions.php'; echo get_username_from_mail_address('"$teacher_mail"');"
EOF
    )
    echo "teacheid: "$teacherid 

    # configure jupyterhub 
    reconfigure_one_jupyterhub "$hubdir" "$teacherid"
    push_hub_patch "$hubdir" 1>/dev/null
    create_directory_structure "$hubdir" "$teacherid"
    
    echo "Restarting new JupyterHub container."
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_jupyterhub_1
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_jupyterhub_1
    
    echo "Configuring auth-proxy container."
    hubip="$(source "$hubdir/jhvmdir-hub/datadir.conf" ; echo "$VMIP")"
    dbip=$("$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker inspect --format='{{.NetworkSettings.IPAddress}}' root_jpydb_1)
    hubport=8000
    # configure hub-const.php
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q << EOF
sed -i "s,HUB_URL = .*,HUB_URL = \"http://$hubip:$hubport\";," /home/ubuntu/auth-proxy/php/hub-const.php
sed -i "s,DB_HOST = .*,DB_HOST = \"$dbip\";," /home/ubuntu/auth-proxy/php/hub-const.php
EOF
    # configure nginx.conf
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_nginx_3 bash << EOF
sed -i "s,proxy_pass http:.*,proxy_pass http://$hubip:$hubport;," /etc/nginx/nginx.conf
EOF

    echo "Restarting auth-proxy nginx container."
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_nginx_3
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_nginx_3

    echo "Restarting auth-proxy daemons."
    "$hubdir/jhvmdir-hub/ssh-shortcut.sh" -q << EOF
sudo docker exec -i root_nginx_3 bash << EOF2
(
  /etc/init.d/nginx start
  /etc/init.d/php5.6-fpm start
) >/tmp/dstart.log 2>&1
# The redirection is necessary otherwise init.d/nginx makes "docker exec" hang
EOF2
EOF

    # Add database schema of local user
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q \
    sudo docker exec -i root_jpydb_1 \
    /usr/lib/postgresql/9.6/bin/psql -U postgres -d jupyterhub << EOF
CREATE SEQUENCE local_users_id_seq START 1;
CREATE TABLE local_users (
    id  integer CONSTRAINT firstkey PRIMARY KEY,
    user_name  varchar(64) UNIQUE NOT NULL,
    password  varchar(128) NOT NULL,
    mail  varchar(64) NOT NULL
);
EOF

    # create password for teacher    
    password=$($rootdir/bin/pwgen.sh)

    # register teacher's userid and password
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_nginx_3 bash << EOF
php -r "require_once '/var/www/php/db.php'; add_local_user('"$teacher_mail"', '"$password"');"
EOF

    # notify password
    echo "----------"
    echo "admin password: "$password
}


associate_idp_proxy()
{
    echo associate_idp_proxy
    idp_proxy_host_name="$1"
    auth_proxy_host_name="$2"

    # set idp-proxy metadata in auth-proxy
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_nginx_3 bash << EOF
/var/www/nginx/simplesamlphp/bin/get_idp_proxy_metadata.sh  $idp_proxy_host_name
EOF
    # register auth-proxy metadat in idp-proxy 
    #"$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_nginx_3 bash << EOF
#/var/www/nginx/simplesamlphp/bin/add_auth_proxy_metadata.php entityID metadataURL -> hostname/ip-address of auth-proxy 
}


: ${urlbase:="niidemo.com"}
reconfigure_one_jupyterhub()
{
    local hubdir="$1"
    local teacherid="$2"
    withslash=""

    # Note: adding the 30 user names below somehow makes initialization of the
    # database timeout while jupyterhub is restarting.  The current workaround
    # is to keep restarting jupyterhub until all entries are initialized.  Use
    # the dumpdb command to make sure progress is being made at each restart.
    # The var NUSERS has been added to drop down to a few user names to speed up
    # setup during development and debugging.
    : ${NUSERS:=30}
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_jupyterhub_1 bash << EOF
    cat >/srv/jupyterhub_users/userlist << EOF3
$teacherid admin
EOF3

    cat >>/srv/jupyterhub_config/jupyterhub_config.py << EOF2
# change to unix authentication:
c.JupyterHub.authenticator_class = 'remote_user.remote_user_auth.RemoteUserLocalAuthenticator'

c.JupyterHub.base_url='$withslash/'

# next line is not used if docker_oauth.DockerAuthenticator is used
c.GoogleOAuthenticator.oauth_callback_url = 'https://$urlbase${withslash}/hub/oauth2callback'
EOF2

EOF

    # At least once, the above failed for some reason.  Add a check to
    # make it clear if this happens again.
    
    checklastline="$(
      "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q \
           sudo docker exec -i root_jupyterhub_1 \
               tail -n 1 /srv/jupyterhub_config/jupyterhub_config.py
    )"
    if [[ "$checklastline" != */$urlbase${withslash}/* ]]; then
	echo "Attempt to reconfigure a JupyterHub instance failed for some reason." 1>&2
	echo "Please try running the command again." 1>&2
	rm -f "$hubdir/hubid"
	exit 1
    fi
}


delete_jupyterhub()
{
    hubdir="$1"
    [ -d "$hubdir" ] || reportfailed "Hub direcotry '$hubdir' does not exist."

    while true; do
        read -p "Do you delete course '$hubdir'? [Y/n]" answer
        case $answer in
            '' | [Yy]* )
                rm -rf $hubdir
                break;
                ;;
            [Nn]* )
                break;
                ;;
            * )
              echo Please answer yes or no.
        esac
    done;
}


restart_jupyterhub()
{
    hubdir="$1"
    [ -d "$hubdir" ] || reportfailed "Hub direcotry '$hubdir' does not exist."

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_jupyterhub_1
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_jupyterhub_1
}


dump_database()
{
    local hubdir="$1"
    for table in api_tokens users proxies hubs servers; do
	echo
	echo "Table: $table"
	"$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q \
	    	 sudo docker exec -i root_jpydb_1 \
	    	 /usr/lib/postgresql/9.6/bin/psql -U postgres -d jupyterhub <<<"select * from $table ;"
    done
}


fetch_hub_patch()
{
    # fetch the latest of whatever is already in hub-patch-dir-tree
    local hubdir="$1"
    hppath="$rootdir/hub-patch-dir-tree"

    filelist="$(cd "$hppath" && find -type f)"
    [ "$filelist" = "" ] && reportfailed "No files in hub-patch-dir-tree"

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -qt sudo docker exec -i root_jupyterhub_1 bash <<EOF | ( cd "$rootdir/hub-patch-dir-tree" && tar xzv )
set -e
cd /
tar cz $(echo $filelist)
EOF
}


push_hub_patch()
{
    local hubdir="$1"
    hppath="$rootdir/hub-patch-dir-tree"

    filelist="$(cd "$hppath" && ls)"

    (
	echo 'cd / || exit 0 ; tar xzv'
	cd "$rootdir/hub-patch-dir-tree" || exit
	# the tar on the prev line will start reading from stdin, which is provided by this tar:
	tar cz $filelist
    ) | "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_jupyterhub_1 bash
}


create_directory_structure()
{
    local hubdir="$1"
    local teacherid="$2"

    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo bash <<EOF
       mkdir -p /jupyter/admin/{copybook,admin_tools,tools,info}
       chmod a+wr /jupyter/admin/{copybook,admin_tools,tools,info}

       mkdir -p /jupyter/users
       chmod a+wr /jupyter/users

       if getent passwd $teacherid > /dev/null ; then
	   echo "User ($teacherid) exists on hub KVM"
       else
	   echo "Creating user ($teacherid)"
	   # the next line does not create the home directory
	   useradd -s /bin/bash "$teacherid"
       fi

       mkdir -p "/jupyter/admin/$teacherid"

       ipycfg="/jupyter/admin/$teacherid/.ipython/profile_default/ipython_config.py"
       mkdir -p "\${ipycfg%/*}"
       echo "c.InteractiveShellApp.matplotlib = 'inline'" >>"\$ipycfg"

       # Note: probably because of NFS, sometimes programs think this
       # this next symbolic link is a directory when normally it would
       # be behave as the link itself.
       [ -L "/jupyter/admin/$teacherid/admin_tools" ] || \
            ln -s /jupyter/admin/admin_tools "/jupyter/admin/$teacherid/admin_tools"
       chown -R "$teacherid:$teacherid" "/jupyter/admin/$teacherid"
       chmod -R a+wr "/jupyter/admin/$teacherid"
EOF

    # update with latest version
    tar c adapt-notebooks-for-user.sh background-command-processor.sh | \
	"$hubdir/jhvmdir-hub/ssh-shortcut.sh" -q sudo tar xv -C /srv

    # TODO: redo this
    "$hubdir"/jhvmdir-hub/ssh-shortcut.sh -q sudo bash <<EOF
killall background-command-processor.sh
cd /srv
bash -c 'setsid ./background-command-processor.sh 1>>bcp.log 2>&1 </dev/null &'
EOF
}


cmd="$1"
shift

case "$cmd" in
    new) init_jupyterhub "$@"
	 ;;
    associate-idp-proxy) associate_idp_proxy "$@"
	 ;;
    delete) delete_jupyterhub "$@"
	 ;;
    restart) restart_jupyterhub "$@"
	 ;;
    debugjhub) reconfigure_one_jupyterhub "$@"
	 ;;
    dumpdb) dump_database "$@"
	 ;;
    fetch-hub-patch) fetch_hub_patch "$@"
	 ;;
    push-hub-patch) push_hub_patch "$@"
	 ;;
    *) usage
       ;;
esac
