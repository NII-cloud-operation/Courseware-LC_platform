#!/bin/bash

reportfailed()
{
    echo "Script failed...exiting. ($*)" 1>&2
    exit 255
}

usage()
{
    cat <<EOF
Usage:

./bin/serverctl list {hubid}                       ## List servers
./bin/serverctl allow-sudo {hubid} {server_name}   ## Give sudo powers

EOF
}

export ORGCODEDIR="$(cd "$(dirname $(readlink -f "$0"))" && pwd -P)" || reportfailed

rootdir="${ORGCODEDIR%/*}"
ahdir="$rootdir/active-hubs"
[ -d "$ahdir" ] || mkdir "$ahdir" || reportfailed

node_list="node1 node2"

classid_to_hubpath()
{
    local hubid="$1"
    result="$(grep -HFx "$hubid" "$ahdir"/*/hubid)"
    [ "$result" = "" ] && reportfailed "Hub with name '$hubid' not found"
    # result is something like: active-hubs/002/hubid:class4
    echo "${result%/hubid*}"
}

get_container_names()
{
    annotation="$1"
    read ln # skip first line
    while read -a allwords; do
	lastword="${allwords[@]: -1}"
	echo "$lastword$annotation"
    done
}

do_list()
{
    local hubpath ; hubpath="$(classid_to_hubpath "$1")" || exit
    for n in $node_list; do
	"$hubpath"/jhvmdir-${n}/ssh-to-kvm.sh -q sudo docker ps -a | get_container_names " ($n)"
    done
}

find_node_for_container()
{
    containers="$(do_list "$1")"
    local servername="$2"
    while read sname nodeid; do
	if [ "$servername" == "$sname" ]; then
	    echo "${nodeid//[()]/}"
	    return 0
	fi
    done <<<"$containers"
    reportfailed "container not found or not running"
}

do_allow_sudo()
{
    local classid="$1"
    local servername="$2"
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    username="${servername#jupyter-}"
    "$hubpath"/jhvmdir-${thenode}/ssh-to-kvm.sh -q sudo docker exec -i "$servername" bash <<EOF
set -e
if grep "$username" /etc/sudoers 1>/dev/null; then
   echo "Sudo already allowed"
else
   echo '$username ALL=(ALL) NOPASSWD: ALL' >>/etc/sudoers
   echo "Sudo is now allowed for $username."
fi
EOF
}

do_simple_docker_cmd() # implements both start and stop
{
    local classid="$1"
    local servername="$2"
    local dcmd="$3"
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    "$hubpath"/jhvmdir-${thenode}/ssh-to-kvm.sh -q sudo docker "$dcmd" "$servername"
}

humanreadable_to_bytes()
{
    # adapted code from http://stackoverflow.com/questions/4399475/unformat-disk-size-strings/
    (( $BASH_VERSINFO >= 4 )) || reportfailed "requires bash >=4"
    local s="$1"
    tenpower=0
    if [[ "$s" == *.* ]]; then
	local post_decimal="${s#*.}"
	post_decimal="${post_decimal//[^0-9]}"
	tenpower="${#post_decimal}"
    fi
    s=${s^^};s=${s/B};s=${s/.};s=${s/E/KP};s=${s/P/KT}
    s=${s/T/KG};s=${s/G/KM};s=${s/M/KK}

    s=${s//K/*1024}" / ( 10 ** $tenpower )"
    echo $((s))
}

do_image_create()
{
    local classid="$1"
    local servername="$2"
    local imagename="${3%.tar}.tar"

    ## Do tests that can be done quickly first, so user can fix simple problems faster:
    [ "$imagename" == ".tar" ] && reportfailed "The fourth parameter must be a file name to save the image into"
    [ -f "$imagename" ] && reportfailed "The imagefile ($imagename) already exists"

    touch "$imagename" || reportfailed "Unable to open $imagename for writing"
    rm -f "$imagename"

    rm -f "$imagename.inprogress"
    touch "$imagename.inprogress" || reportfailed "Unable to open temporary $imagename for writing"

    ## These have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    ## get the virtual size:
    echo -n "Starting by getting the image size..."
    output="$("$hubpath"/jhvmdir-${thenode}/ssh-to-kvm.sh -q sudo docker ps -s -f name="$servername")"
    echo ".done"
    [ "$(wc -l <<<"$output")" == 2 ] || echo "Warning: problem finding image sizes" 1>&2
    ## output is something like "..........(virtual 4.598 GB)"

    tmp1="${output#*virtual }"
    bytes="$(humanreadable_to_bytes "${tmp1%)*}")"
    
    "$hubpath"/jhvmdir-${thenode}/ssh-to-kvm.sh -q sudo docker export "$servername" >"$imagename.inprogress" &
    pid="$!"
    
    while [ -d "/proc/$pid" ]; do
	read perms links owner group size theres <<<"$(ls -l "$imagename.inprogress")"
	echo "$size / $bytes  ($((size * 100 / bytes ))%)"
	sleep 10
    done
    wait "$pid"
    [ "$?" = "0" ] || reportfailed "docker export"
    mv "$imagename.inprogress" "$imagename" || reportfailed "Final renaming to $imagename"
}

cmd="$1"
shift

case "$cmd" in
    list)
	do_list "$@"
	 ;;
    stop | start)
	do_simple_docker_cmd "$@" "$cmd"
	 ;;
    allow-sudo)
	do_allow_sudo "$@"
	 ;;
    image-create)
	do_image_create "$@"
	 ;;
    *) usage
       ;;
esac
