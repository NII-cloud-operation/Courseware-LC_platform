#!/bin/bash

reportfailed()
{
    echo "Script failed...exiting. ($*)" 1>&2
    exit 255
}

usage()
{
    cat <<EOF
Usage:

## List Jupyter servers
serverctl list COURSE_DIR
  COURSE_DIR: directory of the course environtment.

## Give sudo powers to the Jupyter server
serverctl allow-sudo COURSE_DIR SERVER_NAME
  COURSE_DIR: directory of the course environtment.
  SERVER_NAME: noame of Jupyter server to allow sudo.

## Start Jupyter server 
serverctl start COURSE_DIR SERVER_NAME
  COURSE_DIR: directory of the course environtment.
  SERVER_NAME: name of Jupyter server to start.

## Stop Jupyter server
serverctl stop COURSE_DIR SERVER_NAME
  COURSE_DIR: directory of the course environtment.
  SERVER_NAME: name of Jupyter server to stop.

## Create Jupyter server image and save archive file.
serverctl image-create COURSE_DIR SERVER_NAME IMAGE_NAME [IMAGE_DIR]
  COURSE_DIR: directory of the course environtment.
  SERVER_NAME: name of Jupyter server to stop.
  IMAGE_NAME: name of image. it becomes an archive file name.
  IMAGE_DIR: path of archive file directory. if omit it, current diretory.

## Distribute Jupyter server image 
serverctl image-distribute COURSE_DIR IMAGE_NAME [IMAGE_DIR]
  COURSE_DIR: directory of the course environtment.
  IMAGE_NAME: name of image. it becomes an archive file name.
  IMAGE_DIR: path of archive file directory. if omit it, current diretory.

## Set image to use for start of Jupyter server
serverctl image-set COURSE_DIR IMAGE_NAME
  COURSE_DIR: directory of the course environtment.
  IMAGE_NAME: name of image. it becomes an archive file name.

## List Jupyter server images
serverctl image-list COURSE_DIR
  COURSE_DIR: directory of the course environtment.

EOF
}

export ORGCODEDIR="$(cd "$(dirname $(readlink -f "$0"))" && pwd -P)" || reportfailed

rootdir="${ORGCODEDIR%/*}"
ahdir="$rootdir/active-hubs"

DDCONFFILE="datadir.conf"

node_list="node1 node2"  # This should be overwritten by the value in the main datadir.conf

classid_to_hubpath()
{
    local hubid="$1"
    if [[ ! "$hubid" =~ ^[0-9]{3}$ ]] ; then
        echo $hubid;
    else
        result="$(grep -HFx "$hubid" "$ahdir"/*/hubid)"
        [ "$result" = "" ] && reportfailed "Hub with name '$hubid' not found"
        # result is something like: active-hubs/002/hubid:class4
        echo "${result%/hubid*}"
    fi
}

get_container_names()
{
    annotation="$1"
    read ln # skip first line
    while read -a allwords; do
	lastword="${allwords[@]: -1}"
	echo "$lastword$annotation"
    done
}

function do_list()
{
    ## check parameters
    if [ "$#" -ne 1 ]; then 
        reportfailed "Too few arguments"
    fi

    local hubpath ; hubpath="$(classid_to_hubpath "$1")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"

    for n in $node_list; do
	"$hubpath"/jhvmdir-${n}/ssh-shortcut.sh -q sudo docker ps -a | get_container_names " ($n)"
    done
}

find_node_for_container()
{
    containers="$(do_list "$1")"
    local servername="$2"
    while read sname nodeid; do
	if [ "$servername" == "$sname" ]; then
	    echo "${nodeid//[()]/}"
	    return 0
	fi
    done <<<"$containers"
    reportfailed "container not found or not running"
}

function do_allow_sudo()
{
    local classid="$1"
    local servername="$2"

    ## check parameters
    if [ "$#" -ne 2 ]; then 
        reportfailed "Too few arguments"
    fi

    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    username="${servername#jupyter-}"
    "$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker exec -i "$servername" bash <<EOF
set -e
if grep "$username" /etc/sudoers 1>/dev/null; then
   echo "Sudo already allowed"
else
   echo '$username ALL=(ALL) NOPASSWD: ALL' >>/etc/sudoers
   echo "Sudo is now allowed for $username."
fi
EOF
}

function do_simple_docker_cmd() # implements both start and stop
{
    local classid="$1"
    local servername="$2"
    local dcmd="$3"

    ## check parameters
    if [ "$#" -ne 3 ]; then 
        reportfailed "Too few arguments"
    fi

    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    "$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker "$dcmd" "$servername"
}

humanreadable_to_bytes()
{
    # adapted code from http://stackoverflow.com/questions/4399475/unformat-disk-size-strings/
    (( $BASH_VERSINFO >= 4 )) || reportfailed "requires bash >=4"
    local s="$1"
    tenpower=0
    if [[ "$s" == *.* ]]; then
	local post_decimal="${s#*.}"
	post_decimal="${post_decimal//[^0-9]}"
	tenpower="${#post_decimal}"
    fi
    s=${s^^};s=${s/B};s=${s/.};s=${s/E/KP};s=${s/P/KT}
    s=${s/T/KG};s=${s/G/KM};s=${s/M/KK}

    s=${s//K/*1024}" / ( 10 ** $tenpower )"
    echo $((s))
}

function do_image_create()
{
    local classid="$1"
    local servername="$2"
    local imagename="${3%.tar}"
    local imagefile_dir="${4-./}"

    ## Do tests that can be done quickly first, so user can fix simple problems faster:
    if [[ "$#" -lt 3 || "$#" -gt 4 ]]; then    
        reportfailed "Too few arguments"
    fi
    imagefile_path=${imagefile_dir}/${imagename}.tar
    [ -f "$imagefile_path" ] && reportfailed "The imagefile ($imagefile_path) already exists"

    touch "$imagefile_path" || reportfailed "Unable to open $imagefile_path for writing"
    rm -f "$imagefile_path"

    rm -f "$imagefile_path.inprogress"
    touch "$imagefile_path.inprogress" || reportfailed "Unable to open temporary $imagefile_path for writing"

    ## These tests have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"
    local thenode ; thenode="$(find_node_for_container "$classid" "$servername")" || exit

    ## get the virtual size for giving % progress output:
    echo -n "Starting by getting the image size..."
    output="$("$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker ps -s -f name="$servername")"
    echo ".done"
    [ "$(wc -l <<<"$output")" == 2 ] || echo "Warning: problem finding image sizes" 1>&2
    ## output is something like "..........(virtual 4.598 GB)"

    tmp1="${output#*virtual }"
    bytes="$(humanreadable_to_bytes "${tmp1%)*}")"

    #(Note: An earlier version of this code tried to use "docker
    # export" of a *container* here.  It failed because export strips
    # out metadata from the image that is required by jupyterhub.
    # Therefore, the code here now uses "docker save" of an *image*,
    # and therefore commit is necessary to create an up-to-date
    # image. )
    
    unique_image_name="${imagename}-$(date "+%y%m%d-%H%M%S")"
    echo "Making new commit with name $unique_image_name..."
    "$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q \
	      sudo docker commit "$servername" "$unique_image_name" \
	      || reportfailed "Commit of $servername"
    echo "..Finished commit."

    "$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker save "$unique_image_name" >"$imagefile_path.inprogress" &
    pid="$!"
    
    while [ -d "/proc/$pid" ]; do
	read perms links owner group size theres <<<"$(ls -l "$imagefile_path.inprogress")"
	echo "$size / $bytes  ($((size * 100 / bytes ))%)"
	sleep 10
    done
    wait "$pid"
    [ "$?" = "0" ] || reportfailed "docker export"
    mv "$imagefile_path.inprogress" "$imagefile_path" || reportfailed "Final renaming to $imagefile_path"
    echo "done."
}

do_image_upload()
{
    local classid="$1"
    local imagefile_path="$2"
    local thenode="$3"

    ## Do tests that can be done quickly first, so user can fix simple problems faster:
    [ -f "$imagefile_path" ] || reportfailed "The imagefile ($imagefile_path) not found"

    ## These have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"

    found=false
    for n in $node_list; do
	if [ "$thenode" = "$n" ]; then
	    found=true
	fi
    done
    $found || reportfailed "Node ($thenode) not found"

    echo "Starting docker load for $thenode..."
    ## split the pipeline so we can get the pid of cat
    exec 8< <(exec cat "$imagefile_path")
    catpid="$!"
    "$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker load <&8 &
    pid="$!"

    read perms links owner group size theres <<<"$(ls -l "$imagefile_path")"
    while [ -d "/proc/$pid" ]; do
	if info="$(cat /proc/"$catpid"/fdinfo/3)"; then  # TODO: remove the "fd=3" assumption
	    read label position <<<"$info"
	    echo "$position/$size ($((position * 100 / size))%)"
	else
	    echo "$size/$size (100% ??)"
	fi
	sleep 10
    done
    wait "$pid"
    [ "$?" = "0" ] || reportfailed "docker export"
    
    echo "...finished docker load for $thenode..."
    echo
}

function do_image_distribute()
{
    local classid="$1"
    local imagename="${2%.tar}"
    local image_dir="${3-./}"

    ## Do tests that can be done quickly first, so user can fix simple problems faster:
    if [[ "$#" -lt 2 || "$#" -gt 3 ]]; then 
        reportfailed "Too few arguments"
    fi
    [ -f "$imagefile_path" ] || reportfailed "The imagefile ($imagefile_path) not found"

    ## These have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"

    # distrebute to each node
    for n in $node_list; do
	echo "Uploading image to node ($n)"
	do_image_upload  "$classid" "$imagefile_path" "$n"
    done

    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_jupyterhub_1 bash <<EOF
    cat >>/srv/jupyterhub_config/jupyterhub_config.py <<EOF2
c.DockerSpawner.container_image = '$imagename'
EOF2
EOF

    echo "Restarting JupyterHub configured to new image..."
    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_jupyterhub_1
    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_jupyterhub_1
    echo "..done."
}

function do_image_set()
{
    local classid="$1"
    local imagename="$2"

    ## check parameters
    if [ "$#" -ne 2 ]; then 
        reportfailed "Too few arguments"
    fi
    ## These have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"

    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker exec -i root_jupyterhub_1 bash <<EOF
    cat >>/srv/jupyterhub_config/jupyterhub_config.py <<EOF2
c.DockerSpawner.container_image = '$magename'
EOF2
EOF

    echo "Note: no error checking done on ($imagename).  Be careful."
    echo "Restarting JupyterHub configured to new image..."
    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker stop root_jupyterhub_1
    "$hubpath"/jhvmdir-hub/ssh-shortcut.sh -q sudo docker start root_jupyterhub_1
    echo "..done."
}

function do_image_list()
{
    local classid="$1"
    
    ## check parameters
    if [ "$#" -ne 1 ]; then 
        reportfailed "Too few arguments"
    fi
    ## These have some delay
    local hubpath ; hubpath="$(classid_to_hubpath "$classid")" || exit
    source "$hubpath/$DDCONFFILE" || reportfailed "missing $DDCONFFILE"
    
    # TODO: if this ends up being used, improve the output formatting
    for thenode in $node_list; do
	echo "Images in $thenode:"
	"$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q sudo docker images
	"$hubpath"/jhvmdir-${thenode}/ssh-shortcut.sh -q df -h /
	echo
    done
}


cmd="$1"
shift

case "$cmd" in
    list)
	do_list "$@"
	 ;;
    stop | start)
	do_simple_docker_cmd "$@" "$cmd"
	 ;;
    allow-sudo)
	do_allow_sudo "$@"
	 ;;
    image-create)
	do_image_create "$@"
	 ;;
    image-distribute)
	do_image_distribute "$@"
	 ;;
    image-set)
	do_image_set "$@"
	 ;;
    image-list)
	do_image_list "$@"
	 ;;
    image-upload)
	do_image_upload "$@"
	 ;;
    *) usage
       ;;
esac
